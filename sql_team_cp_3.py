# -*- coding: utf-8 -*-
"""SQL Team CP#3.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1nCWXfOQHHToWL1__aJ6FcVK-rRoghrfW
"""

import pandas as pd
from sqlalchemy import create_engine
import numpy as np
import os

conn_url = 'postgresql://postgres:123@localhost/APAN5310_TEAM'
engine = create_engine(conn_url)
connection = engine.connect()

#setting up working directory
path = '/Users/yingyingzhang/Desktop/'
os.chdir(path)

df = pd.read_csv('MA_Public_Schools_2017.csv')

stmt1 = """
    CREATE TABLE district(
     district_code INT,
     district_name VARCHAR(225) NOT NULL,
     PRIMARY KEY (district_code)
    );
    
    CREATE TABLE school (
      school_code INT,
      school_name VARCHAR(225) NOT NULL,
      school_type varchar(30)  CHECK (school_type IN ('Public School','Charter School')),
      contact_name VARCHAR(100) NOT NULL,
      address_1 VARCHAR(125) NOT NULL,
      address_2 VARCHAR(125),
      town VARCHAR(100) NOT NULL,
      state VARCHAR(2) NOT NULL,
      zip VARCHAR(4) NOT NULL,
      phone VARCHAR(14) NOT NULL,
      fax VARCHAR(14),
      district_code INT,
      PRIMARY KEY (school_code),
      FOREIGN KEY (district_code) REFERENCES district(district_code)
    );
    
    CREATE TABLE school_enrollment(
      school_code INT,
      enrollment_grade VARCHAR(20) NOT NULL,
      number_of_students INT NOT NULL,
      PRIMARY KEY (school_code,enrollment_grade),
      FOREIGN KEY (school_code) REFERENCES school(school_code)
    );

  CREATE TABLE student_races(
  school_code INT,
  race VARCHAR(50) NOT NULL,
  percentage_of_students NUMERIC(5,2) NOT NULL,
  PRIMARY KEY(school_code,race),
  FOREIGN KEY (school_code) REFERENCES school(school_code)
);

create table student_gender(
   school_code integer,
   gender varchar(10),
   percentage_of_students numeric(5,2),
   Primary key (school_code,gender),
   Foreign key (school_code) references school);
   

create table type_of_disadvantage(
  disadvantage_id serial,
  disadvantage_name varchar(50) not null,
  primary key(disadvantage_id));
  

create table students_at_disadvantage(
   school_code integer,
   disadvantage_id serial,
   percentage_of_students numeric(5,2),
   Primary key (school_code,disadvantage_id),
   Foreign key (school_code) references school,
   Foreign key (disadvantage_id) references type_of_disadvantage);


    CREATE TABLE teacher_salary(
      school_code integer,
      district_code int,
      total_salary int,
      avg_salary int,
      FTE_count int,
      PRIMARY KEY (school_code,district_code),
      FOREIGN KEY (school_code) REFERENCES school(school_code),
      FOREIGN KEY (district_code) REFERENCES district(district_code)
      );
    
   
    
    CREATE TABLE status(
      school_code integer,
      student_status varchar(30),
      percentage_of_students numeric(5,2),
      PRIMARY KEY (school_code, student_status),
      FOREIGN KEY (school_code) REFERENCES school (school_code),
      CHECK (student_status IN ('Graduated','Still in School','Non-Grad Completers','GED','Dropped Out','Permanently Excluded'))
);
    
    CREATE TABLE graduates_attending_higher_education(
      school_code integer,
      university_or_college_type varchar(30),
      percentage_of_students numeric(5,2),
      PRIMARY KEY (school_code, university_or_college_type),
      FOREIGN KEY (school_code) REFERENCES school (school_code),
      CHECK (university_or_college_type IN ('Attending College','Private Two-Year','Private Four-Year','Public Two-Year','Public Four-Year','MA Community College','MA State University','UMass'))
);

CREATE TABLE ap_test (
  school_code	integer,
	test_number	varchar(20),
	number_of_students	integer,
	PRIMARY KEY (school_code, test_number),
	FOREIGN KEY (school_code) REFERENCES school (school_code),
	CHECK (test_number IN ('1','2','3','4','5 or more'))
);

CREATE TABLE ap_score (
	school_code	integer,
	grade	integer,
	number_of_students	integer,
	PRIMARY KEY (school_code, grade),
	FOREIGN KEY (school_code) REFERENCES school (school_code),
	CHECK (grade IN (1,2,3,4,5))
);

CREATE TABLE sat_test (
	school_code	integer,
	subject	varchar(8),
	average_grade	integer,
	PRIMARY KEY (school_code, subject),
	FOREIGN KEY (school_code) REFERENCES school (school_code),
	CHECK (subject IN ('Reading','Writing','Math'))
);
	
create table school_ppi (
    school_code int,
    ppi_type VARCHAR(50) NOT NULL,
    ppi numeric(5,2),
    primary key (school_code,ppi_type),
    foreign key (school_code) references school(school_code)
	);
	
CREATE TABLE district_ppi (
    district_code int,
    ppi_type VARCHAR(50) NOT NULL,
	  ppi numeric(5,2),
	  primary key (district_code,ppi_type),
    foreign key (district_code) references district
	);
"""

connection.execute(stmt1)

"""ETL

district table
"""

district_df = df[['District Code', 'District Name']].drop_duplicates()
#convert original column names to names created in the very first step
district_df=district_df.rename(columns={"District Code": "district_code", "District Name": "district_name"})

### insert district table
district_df.to_sql(name='district', con=engine, if_exists='append', index=False)

"""school table"""

df=df.drop(['Function'], axis=1)

school_df=df.iloc[:,0:11]
school_df['district_code']=df['District Code']

#convert original column names to names created in the very first step
school_df=school_df.rename(columns={'School Code': 'school_code','School Name':'school_name',\
                                    'School Type':'school_type','Contact Name':'contact_name',\
                                    'Address 1':'address_1','Address 2':'address_2',\
                                    'Town':'town','State':'state','Zip':'zip','Phone':'phone','Fax':'fax'})

### insert school table
school_df.to_sql(name='school', con=engine, if_exists='append', index=False)

"""school_enrollment table"""

# create the school_code list which will be inserted as the first column
school_code_unique=school_df['school_code']

school_code_list=[]
for i in school_code_unique:
    for j in range(1,16):
        school_code_list.append(i)

#create the enrollment grade column
grade_list=['PK_Enrollment','K_Enrollment','1_Enrollment','2_Enrollment','3_Enrollment','4_Enrollment',\
           '5_Enrollment','6_Enrollment','7_Enrollment','8_Enrollment','9_Enrollment','10_Enrollment',\
           '11_Enrollment','12_Enrollment','SP_Enrollment']*len(school_df)

#create the number_of_student list
number_of_students_list=[]
for i in range(0,len(df)):
    s=df.iloc[i,14:29]
    for j in s:
        number_of_students_list.append(j)

#combine the three lists above
school_enrollment_df=pd.DataFrame({'school_code':school_code_list,\
                                   'enrollment_grade':grade_list,\
                                   'number_of_students':number_of_students_list})

### insert school_enrollment table
school_enrollment_df.to_sql(name='school_enrollment', con=engine, if_exists='append', index=False)

"""student_races table"""

student_races_df=df[['School Code','% African American','% Asian','% Hispanic','% White','% Native American','% Native Hawaiian, Pacific Islander','% Multi-Race, Non-Hispanic']]

student_races_df.head()

student_races_df.insert(1,'race_1',value='African American')
student_races_df.insert(3,'race_2',value='Asian')
student_races_df.insert(5,'race_3',value='Hispanic')
student_races_df.insert(7,'race_4',value='White')
student_races_df.insert(9,'race_5',value='Native American')
student_races_df.insert(11,'race_6',value='Native Hawaiian, Pacific Islander')
student_races_df.insert(13,'race_7',value='Multi-Race, Non-Hispanic')
student_races_df.head()

df_race_1=student_races_df[['School Code','race_1','% African American']]
df_race_2=student_races_df[['School Code','race_2','% Asian']]
df_race_3=student_races_df[['School Code','race_3','% Hispanic']]
df_race_4=student_races_df[['School Code','race_4','% White']]
df_race_5=student_races_df[['School Code','race_5','% Native American']]
df_race_6=student_races_df[['School Code','race_6','% Native Hawaiian, Pacific Islander']]
df_race_7=student_races_df[['School Code','race_7','% Multi-Race, Non-Hispanic']]

df_race_1.rename(columns={'School Code':'school_code', 'race_1':'race','% African American':'percentage_of_students'}, inplace=True)
df_race_2.rename(columns={'School Code':'school_code', 'race_2':'race','% Asian':'percentage_of_students'}, inplace=True)
df_race_3.rename(columns={'School Code':'school_code', 'race_3':'race','% Hispanic':'percentage_of_students'}, inplace=True)
df_race_4.rename(columns={'School Code':'school_code', 'race_4':'race','% White':'percentage_of_students'}, inplace=True)
df_race_5.rename(columns={'School Code':'school_code', 'race_5':'race','% Native American':'percentage_of_students'}, inplace=True)
df_race_6.rename(columns={'School Code':'school_code', 'race_6':'race','% Native Hawaiian, Pacific Islander':'percentage_of_students'}, inplace=True)
df_race_7.rename(columns={'School Code':'school_code', 'race_7':'race','% Multi-Race, Non-Hispanic':'percentage_of_students'}, inplace=True)

race_combine=pd.concat( [df_race_1, df_race_2,df_race_3,df_race_4,df_race_5,df_race_6,df_race_7], axis=0 )

race_combine=race_combine.sort_values(by='school_code')

race_df=race_combine.drop_duplicates()

race_df_final=race_df.dropna()

race_df_final.to_sql(name='student_races', con=engine, if_exists='append', index=False)

"""student_gender table"""

gender_df=df[['School Code','% Males','% Females']]

gender_df.head()

gender_df.insert(1,'gender_1',value='Male')
gender_df.insert(3,'gender_2',value='Female')

gender_1=gender_df[['School Code','gender_1','% Males']]
gender_2=gender_df[['School Code','gender_2','% Females']]

gender_1.rename(columns={'School Code':'school_code', 'gender_1':'gender','% Males':'percentage_of_students'}, inplace=True)
gender_2.rename(columns={'School Code':'school_code', 'gender_2':'gender','% Females':'percentage_of_students'}, inplace=True)

gender_combine=pd.concat( [gender_1,gender_2], axis=0 )

gender_combine=gender_combine.sort_values(by='school_code')

gender_df=gender_combine.drop_duplicates()

gender_df.to_sql(name='student_gender', con=engine, if_exists='append', index=False)

"""type_of_disadvantage table"""

data = [[1, 'First Language Not English'], [2, 'English Language Learner'], [3, 'Students With Disabilities'],[4,'High Needs'],[5,'Economically Disadvantaged']]

type_disad = pd.DataFrame(data, columns = ['disadvantage_id', 'disadvantage_name'])

type_disad

type_disad.to_sql(name='type_of_disadvantage', con=engine, if_exists='append', index=False)

"""students_at_disadvantage table"""

student_dis=df[['School Code','% First Language Not English','% English Language Learner','% Students With Disabilities','% High Needs','% Economically Disadvantaged']]

student_dis[:5]

student_dis.insert(1,'id_1',value=1)
student_dis.insert(3,'id_2',value=2)
student_dis.insert(5,'id_3',value=3)
student_dis.insert(7,'id_4',value=4)
student_dis.insert(9,'id_5',value=5)

dis_1=student_dis[['School Code','id_1','% First Language Not English']]
dis_2=student_dis[['School Code','id_2','% English Language Learner']]
dis_3=student_dis[['School Code','id_3','% Students With Disabilities']]
dis_4=student_dis[['School Code','id_4','% High Needs']]
dis_5=student_dis[['School Code','id_5','% Economically Disadvantaged']]

dis_1.rename(columns={'School Code':'school_code', 'id_1':'disadvantage_id','% First Language Not English':'percentage_of_students'}, inplace=True)
dis_2.rename(columns={'School Code':'school_code', 'id_2':'disadvantage_id','% English Language Learner':'percentage_of_students'}, inplace=True)
dis_3.rename(columns={'School Code':'school_code', 'id_3':'disadvantage_id','% Students With Disabilities':'percentage_of_students'}, inplace=True)
dis_4.rename(columns={'School Code':'school_code', 'id_4':'disadvantage_id','% High Needs':'percentage_of_students'}, inplace=True)
dis_5.rename(columns={'School Code':'school_code', 'id_5':'disadvantage_id','% Economically Disadvantaged':'percentage_of_students'}, inplace=True)

dis_combine=pd.concat( [dis_1, dis_2,dis_3,dis_4,dis_5], axis=0 )

dis_combine=dis_combine.sort_values(by='school_code')

dis_df=dis_combine.drop_duplicates()

dis_df.to_sql(name='students_at_disadvantage', con=engine, if_exists='append', index=False)

"""teacher_salary table"""

#Select attributes from the original dataframe to create the new teacher_salary dataframe
teacher_salary = df[['School Code','District Code','Salary Totals','Average Salary','FTE Count']]

#Convert original column names to names created in the very first step        
teacher_salary = teacher_salary.rename(columns={"School Code": "school_code", "District Code": "district_code","Salary Totals": "total_salary", "Average Salary": "avg_salary", "FTE Count":"fte_count"})

### insert teacher_salary table
teacher_salary.to_sql(name='teacher_salary', con=engine, if_exists='append', index=False)

"""status table"""

#Build several temporary dataframes using attributes from the original dataframe
Graduated = df[['School Code','% Graduated']]
Still_in_School = df[['School Code','% Still in School']]
Non_Grad_Completers = df[['School Code','% Non-Grad Completers']]
GED = df[['School Code','% GED']]
Dropped_Out = df[['School Code','% Dropped Out']]
Permanently_Excluded = df[['School Code','% Permanently Excluded']]

#Add attribute 'student_status' in the temporary dataframes
Graduated.insert(1, 'student_status','Graduated')
Still_in_School.insert(1, 'student_status','Still in School')
Non_Grad_Completers.insert(1, 'student_status','Non-Grad Completers')
GED.insert(1, 'student_status','GED')
Dropped_Out.insert(1, 'student_status','Dropped Out')
Permanently_Excluded.insert(1, 'student_status','Permanently Excluded')

#Use concat function to combine all of the above temporary dataframes, and create the new dataframe 'status'
status = pd.DataFrame()

status['school_code']=pd.concat([Graduated['School Code'],Still_in_School['School Code'],Non_Grad_Completers['School Code'],GED['School Code'],Dropped_Out['School Code'],Permanently_Excluded['School Code']])
status['student_status']=pd.concat([Graduated['student_status'],Still_in_School['student_status'],Non_Grad_Completers['student_status'],GED['student_status'],Dropped_Out['student_status'],Permanently_Excluded['student_status']])
status['percentage_of_students']=pd.concat([Graduated['% Graduated'],Still_in_School['% Still in School'],Non_Grad_Completers['% Non-Grad Completers'],GED['% GED'],Dropped_Out['% Dropped Out'],Permanently_Excluded['% Permanently Excluded']])

### insert status table
status.to_sql(name='status', con=engine, if_exists='append', index=False)

"""graduates_attending_higher_education table"""

#Build several temporary dataframes using attributes from the original dataframe
Attending_College = df[['School Code','% Attending College']]
Private_Two_Year = df[['School Code','% Private Two-Year']]
Private_Four_Year = df[['School Code','% Private Four-Year']]
Public_Two_Year = df[['School Code','% Public Two-Year']]
Public_Four_Year = df[['School Code','% Public Four-Year']]
MA_Community_College = df[['School Code','% MA Community College']]
MA_State_University = df[['School Code','% MA State University']]
UMass = df[['School Code','% UMass']]

#Add 'university_or_college_type' in the temporary dataframes
Attending_College.insert(1, 'university_or_college_type','Attending College')
Private_Two_Year.insert(1, 'university_or_college_type','Private Two-Year')
Private_Four_Year.insert(1, 'university_or_college_type','Private Four-Year')
Public_Two_Year.insert(1, 'university_or_college_type','Public Two-Year')
Public_Four_Year.insert(1, 'university_or_college_type','Public Four-Year')
MA_Community_College.insert(1, 'university_or_college_type','MA Community College')
MA_State_University.insert(1, 'university_or_college_type','MA State University')
UMass.insert(1, 'university_or_college_type','UMass')

#Use concat function to combine all of the above dataframes, and create the new dataframe 'graduates_attending_higher_education'
graduates_attending_higher_education = pd.DataFrame()

graduates_attending_higher_education['school_code']=pd.concat([Attending_College['School Code'],Private_Two_Year['School Code'],Private_Four_Year['School Code'],Public_Two_Year['School Code'],Public_Four_Year['School Code'],MA_Community_College['School Code'],MA_State_University['School Code'],UMass['School Code']])
graduates_attending_higher_education['university_or_college_type']=pd.concat([Attending_College['university_or_college_type'],Private_Two_Year['university_or_college_type'],Private_Four_Year['university_or_college_type'],Public_Two_Year['university_or_college_type'],Public_Four_Year['university_or_college_type'],MA_Community_College['university_or_college_type'],MA_State_University['university_or_college_type'],UMass['university_or_college_type']])
graduates_attending_higher_education['percentage_of_students']=pd.concat([Attending_College['% Attending College'],Private_Two_Year['% Private Two-Year'],Private_Four_Year['% Private Four-Year'],Public_Two_Year['% Public Two-Year'],Public_Four_Year['% Public Four-Year'],MA_Community_College['% MA Community College'],MA_State_University['% MA State University'],UMass['% UMass']])

### insert teacher_salary table
graduates_attending_higher_education.to_sql(name='graduates_attending_higher_education', con=engine, if_exists='append', index=False)

"""ap_test table"""

df_ap_test = df[['School Code', 'AP_One Test','AP_Two Tests','AP_Three Tests','AP_Four Tests','AP_Five or More Tests']]
df_ap_test.head()

#insert 5 colums to original dataframe to represent the test numbers for each group of student
df_ap_test.insert(1,'test_number_1',value='1')
df_ap_test.insert(3,'test_number_2',value='2')
df_ap_test.insert(5,'test_number_3',value='3')
df_ap_test.insert(7,'test_number_4',value='4')
df_ap_test.insert(9,'test_number_5',value='5 or more')
df_ap_test.head()

#seperate the dataframe with three key attribute
df_ap_test_1=df_ap_test[['School Code','test_number_1','AP_One Test']]
df_ap_test_2=df_ap_test[['School Code','test_number_2','AP_Two Tests']]
df_ap_test_3=df_ap_test[['School Code','test_number_3','AP_Three Tests']]
df_ap_test_4=df_ap_test[['School Code','test_number_4','AP_Four Tests']]
df_ap_test_5=df_ap_test[['School Code','test_number_5','AP_Five or More Tests']]

#convert original column names to names in developed table
df_ap_test_1.columns = ['school_code','test_number','number_of_students']
df_ap_test_2.columns = ['school_code','test_number','number_of_students']
df_ap_test_3.columns = ['school_code','test_number','number_of_students']
df_ap_test_4.columns = ['school_code','test_number','number_of_students']
df_ap_test_5.columns = ['school_code','test_number','number_of_students']

#use concat to combine dataframe above as ap_test_combine
ap_test_combine=pd.concat( [df_ap_test_1, df_ap_test_2,df_ap_test_3,df_ap_test_4,df_ap_test_5], axis=0 )
ap_test_combine=ap_test_combine.sort_values(by='school_code')

#drop duplicate
ap_test_df=ap_test_combine.drop_duplicates()

#insert table ap_test
ap_test_df.to_sql(name='ap_test', con=engine, if_exists='append', index=False)

"""ap_score table"""

df_ap_score = df[['School Code', 'AP_Score=1','AP_Score=2','AP_Score=3','AP_Score=4','AP_Score=5']]
df_ap_score.head()

#insert 5 colums to original dataframe to represent the test grade for each group of student
df_ap_score.insert(1,'grade_1',value='1')
df_ap_score.insert(3,'grade_2',value='2')
df_ap_score.insert(5,'grade_3',value='3')
df_ap_score.insert(7,'grade_4',value='4')
df_ap_score.insert(9,'grade_5',value='5')
df_ap_score.head()

#seperate the dataframe with three key attribute
df_ap_score_1=df_ap_score[['School Code','grade_1','AP_Score=1']]
df_ap_score_2=df_ap_score[['School Code','grade_2','AP_Score=2']]
df_ap_score_3=df_ap_score[['School Code','grade_3','AP_Score=3']]
df_ap_score_4=df_ap_score[['School Code','grade_4','AP_Score=4']]
df_ap_score_5=df_ap_score[['School Code','grade_5','AP_Score=5']]

#convert original column names to names in developed table
df_ap_score_1.columns = ['school_code','grade','number_of_students']
df_ap_score_2.columns = ['school_code','grade','number_of_students']
df_ap_score_3.columns = ['school_code','grade','number_of_students']
df_ap_score_4.columns = ['school_code','grade','number_of_students']
df_ap_score_5.columns = ['school_code','grade','number_of_students']

#use concat to combine dataframe above as ap_score_combine
ap_score_combine=pd.concat( [df_ap_score_1, df_ap_score_2,df_ap_score_3,df_ap_score_4,df_ap_score_5], axis=0 )

ap_score_combine=ap_score_combine.sort_values(by='school_code')

#drop duplicate
ap_score_df=ap_score_combine.drop_duplicates()

#insert table ap_score
ap_score_df.to_sql(name='ap_score', con=engine, if_exists='append', index=False)

"""sat_test table"""

df_sat_test = df[['School Code', 'Average SAT_Reading','Average SAT_Writing','Average SAT_Math']]
df_sat_test.head()

#insert 3 colums to original dataframe to represent the subject for each average score
df_sat_test.insert(1,'subject_1',value='Reading')
df_sat_test.insert(3,'subject_2',value='Writing')
df_sat_test.insert(5,'subject_3',value='Math')
df_sat_test

#seperate the dataframe with three key attribute
df_sat_test_1=df_sat_test[['School Code','subject_1','Average SAT_Reading']]
df_sat_test_2=df_sat_test[['School Code','subject_2','Average SAT_Writing']]
df_sat_test_3=df_sat_test[['School Code','subject_3','Average SAT_Math']]

#convert original column names to names in developed table
df_sat_test_1.columns = ['school_code','subject','average_grade']
df_sat_test_2.columns = ['school_code','subject','average_grade']
df_sat_test_3.columns = ['school_code','subject','average_grade']

#use concat to combine dataframe above as sat_test_combine
sat_test_combine=pd.concat( [df_sat_test_1,df_sat_test_2,df_sat_test_3], axis=0 )

sat_test_combine=sat_test_combine.sort_values(by='school_code')

#drop duplicate
sat_test_df=sat_test_combine.drop_duplicates()

#insert table SAT_test
sat_test_df.to_sql(name='sat_test', con=engine, if_exists='append', index=False)



"""## <font color = 'green'>Progress and Performance Index Table"""

school_acct = df[['School Code','Progress and Performance Index (PPI) - All Students','Progress and Performance Index (PPI) - High Needs Students']]
school_acct.head()

school_acct.insert(1,'ppi_type_1',value='All students')
school_acct.insert(3,'ppi_type_2',value='High Needs')

ppi_1=school_acct[['School Code','ppi_type_1','Progress and Performance Index (PPI) - All Students']]
ppi_2=school_acct[['School Code','ppi_type_2','Progress and Performance Index (PPI) - High Needs Students']]

ppi_1.rename(columns={'School Code':'school_code', 'ppi_type_1':'ppi_type','Progress and Performance Index (PPI) - All Students':'ppi'}, inplace=True)
ppi_2.rename(columns={'School Code':'school_code', 'ppi_type_2':'ppi_type','Progress and Performance Index (PPI) - High Needs Students':'ppi'}, inplace=True)

ppi_combine=pd.concat([ppi_1,ppi_2], axis=0)

ppi_combine=ppi_combine.sort_values(by='school_code')

ppi_df=ppi_combine.drop_duplicates()

ppi_df.to_sql(name='school_ppi', con=engine, if_exists='append', index=False)



"""## <font color = 'green'>District Progress and Performance Index Table"""

dist_acct = df[['District Code',
               'District_Progress and Performance Index (PPI) - All Students',
               'District_Progress and Performance Index (PPI) - High Needs Students']]
dist_acct.head()

dist_acct.insert(1,'ppi_type_1',value='All students')
dist_acct.insert(3,'ppi_type_2',value='High Needs')

ppi_dist_1=dist_acct[['District Code','ppi_type_1','District_Progress and Performance Index (PPI) - All Students']]
ppi_dist_2=dist_acct[['District Code','ppi_type_2','District_Progress and Performance Index (PPI) - High Needs Students']]

ppi_dist_1.rename(columns={'District Code':'district_code', 'ppi_type_1':'ppi_type','District_Progress and Performance Index (PPI) - All Students':'ppi'}, inplace=True)
ppi_dist_2.rename(columns={'District Code':'district_code', 'ppi_type_2':'ppi_type','District_Progress and Performance Index (PPI) - High Needs Students':'ppi'}, inplace=True)

ppi_dist_combine=pd.concat([ppi_dist_1,ppi_dist_2], axis=0)

ppi_dist_combine=ppi_dist_combine.sort_values(by='district_code')

dist_ppi = ppi_dist_combine.drop_duplicates()

dist_ppi.to_sql(name='district_ppi', con=engine, if_exists='append', index=False)



"""### **Querying for Analytical Procedures**

Q1: What are the top 10 public and top 10 charter schools in terms of the number of students who are economically disadvantaged?
"""

stmt1 = """
WITH cte AS (SELECT sad.school_code, sad.percentage_of_students,f.total_number_of_students,
      				 (f.total_number_of_students*sad.percentage_of_students)/100 AS number_of_students_econ_dis
		     FROM students_at_disadvantage AS sad, type_of_disadvantage AS tod,
					(SELECT school_code, SUM(number_of_students) AS total_number_of_students
					 FROM school_enrollment
					 GROUP BY school_code) AS f
			WHERE sad.school_code=f.school_code AND tod.disadvantage_name = 'Economically Disadvantaged' AND 
	 			  sad.disadvantage_id = tod.disadvantage_id
			GROUP BY sad.school_code, f.total_number_of_students, sad.percentage_of_students)
SELECT * 
FROM   (SELECT school_code, school_name, school_type, total_number_of_students,
		       percentage_of_students AS percentage_of_students_econ_dis, number_of_students_econ_dis, 
	           RANK () OVER (PARTITION BY school_type ORDER BY number_of_students_econ_dis DESC NULLS LAST) AS ranking
         FROM cte LEFT OUTER JOIN school USING (school_code)) AS foo
WHERE foo.ranking <=10;
"""

result_1 = connection.execute(stmt1).fetchall()
column_names_1 = result_1[0].keys()
df_q1 = pd.DataFrame(result_1, columns=column_names_1)

df_q1

"""Q2: Are there differences across school districts within MA in terms of diversity, aka. the ratio of female students and the proportion of students from minority races (not white)?"""

stmt2 = """

WITH cte AS (SELECT s.school_code, s.district_code, f.total_number_of_students,
	 			   (sg.percentage_of_students*f.total_number_of_students)/100 AS number_of_female_stu,
	  			   (mr.total_pct_not_white*f.total_number_of_students)/100 AS number_of_stu_not_white
			 FROM school AS s, student_gender AS sg,
	 			 (SELECT school_code, SUM(number_of_students) AS total_number_of_students
	  			  FROM school_enrollment
	  			  GROUP BY school_code) AS f,
	  			 (SELECT school_code, SUM(percentage_of_students) AS total_pct_not_white
	   			  FROM student_races
	  			  WHERE race != 'White'
	  			  GROUP BY school_code) AS mr
			WHERE s.school_code=sg.school_code AND sg.school_code=f.school_code AND sg.gender = 'Female'
	 				 AND mr.school_code=f.school_code AND mr.school_code=s.school_code)
					 
SELECT district_code, district_name, 
		ROUND((total_female/total_stu)*100,2) AS pct_female, 
   		ROUND((total_not_white/total_stu)*100,2) AS pct_not_white
FROM   (SELECT d.district_code,d.district_name, 
      		 SUM(cte.number_of_female_stu) AS total_female, 
	   		 SUM(cte.number_of_stu_not_white) AS total_not_white,
	   		 SUM(cte.total_number_of_students) AS total_stu
		FROM cte, district AS d
		WHERE d.district_code = cte.district_code
		GROUP BY d.district_code) AS foo
ORDER BY pct_female ASC;

"""

result_2 = connection.execute(stmt2).fetchall()
column_names_2 = result_2[0].keys()
df_q2 = pd.DataFrame(result_2, columns=column_names_2)

df_q2

"""Q3: How are the schools with top 20 and last 20 graduation rates distributed geographically?"""

stmt3 = """

    SELECT student_status, district_code   
    FROM(
      SELECT S.student_status, D.district_code, DENSE_RANK () OVER (ORDER BY S.percentage_of_students DESC NULLS LAST)
      FROM school As C, status AS S, district AS D
      WHERE C.school_code = S.school_code
      AND C.district_code = D.district_code
      AND S.student_status = 'Graduated') AS foo
    WHERE DENSE_RANK <= 20;
    
"""

result_3 = connection.execute(stmt3).fetchall()
column_names_3 = result_3[0].keys()
df_q3 = pd.DataFrame(result_3, columns=column_names_3)

import matplotlib as mpl
from matplotlib import pyplot as plt 

df_q3.hist()
plt.title("Top 20 Graduation Rates Distribution")
plt.xlabel('district_code')
plt.ylabel('Count')
plt.show()

stmt3_2 = """

    SELECT student_status, district_code   
    FROM(
      SELECT S.student_status, D.district_code, DENSE_RANK () OVER (ORDER BY S.percentage_of_students ASC NULLS LAST)
      FROM school As C, status AS S, district AS D
      WHERE C.school_code = S.school_code
      AND C.district_code = D.district_code
      AND S.student_status = 'Graduated') AS foo
    WHERE DENSE_RANK <= 20;
    
"""

result_3_2 = connection.execute(stmt3_2).fetchall()
column_names_3_2 = result_3_2[0].keys()
df_q3_2 = pd.DataFrame(result_3_2, columns=column_names_3_2)

df_q3_2.hist()
plt.title("Last 20 Graduation Rates Distribution")
plt.xlabel('district_code')
plt.ylabel('Count')
plt.show()

"""**Q4**: What is each school’s advanced placement participation?"""

stmt4 = """

WITH total_enrollment(school_code, total_number) as
        (SELECT school_enrollment.school_code,
SUM(COALESCE(school_enrollment.number_of_students,0)) as total_number
        FROM school_enrollment
        GROUP BY school_enrollment.school_code),
        total_ap(school_code, ap_number) as
        (SELECT ap_test.school_code, SUM(COALESCE(ap_test.number_of_students,0)) as ap_number
        FROM ap_test
        WHERE ap_test.number_of_students > 0
        GROUP BY ap_test.school_code)
 
    SELECT school_enrollment.school_code, total_ap.ap_number, total_enrollment.total_number, ROUND(CAST(ap_number AS numeric(6,2))/CAST(total_number AS numeric(6,2)),4) AS ratio_of_ap
    FROM school_enrollment, total_enrollment, total_ap
    WHERE school_enrollment.school_code=total_enrollment.school_code 
    AND school_enrollment.school_code=total_ap.school_code
    AND total_enrollment.school_code=total_ap.school_code
    AND total_number > 0
    GROUP BY school_enrollment.school_code, total_ap.ap_number, total_enrollment.total_number
    ORDER BY ratio_of_ap DESC;

"""

result_4 = connection.execute(stmt4).fetchall()
column_names_4 = result_4[0].keys()
df_q4 = pd.DataFrame(result_4, columns=column_names_4)
df_q4

"""Q5:What are the top 20 schools having the highest average score of SAT?"""

stmt = """

SELECT school_code, school_name, average_score_of_different_subject
FROM (SELECT sat_test.school_code AS school_code,school.school_name AS school_name,
AVG(COALESCE(sat_test.average_grade,0)) as average_score_of_different_subject,
RANK() OVER (ORDER BY AVG(COALESCE(sat_test.average_grade,0)) DESC)
FROM sat_test JOIN school ON sat_test.school_code=school.school_code 
GROUP BY sat_test.school_code, school.school_name) s
WHERE rank<=20;
"""

results = connection.execute(stmt).fetchall()
column_names = results[0].keys()
temp_df = pd.DataFrame(results, columns=column_names)
temp_df

"""Q6:How does each school perform on AP test in terms of the pass rate? (grade>=3 means pass)?"""

stmt = """

ALTER TABLE ap_score
ALTER COLUMN number_of_students TYPE numeric(8,4);

WITH pass_students(school_code, pass_student_number) as
    (SELECT ap_score.school_code, SUM(COALESCE(ap_score.number_of_students,0)) as pass_student_number
    FROM ap_score
    WHERE AP_score.grade>=3
    GROUP BY ap_score.school_code),
    total_students(school_code, total_student_number) as
    (SELECT ap_score.school_code, SUM(COALESCE(ap_score.number_of_students,0)) as total_student_number
    FROM ap_score
    GROUP BY ap_score.school_code)
    
SELECT school.school_code as school_code, school.school_name as school_name, 
	  pass_students.pass_student_number as pass_student_number, total_students.total_student_number as total_student_number,
CASE 
    WHEN total_student_number=0 
    THEN NULL 
    ELSE ROUND((pass_student_number/total_student_number),4) END AS rate_of_pass
FROM school, pass_students, total_students
WHERE school.school_code=pass_students.school_code AND school.school_code=total_students.school_code
AND pass_students.school_code=total_students.school_code
GROUP BY school.school_code, school.school_name, pass_Student_number, total_student_number
ORDER BY rate_of_pass 

"""


results = connection.execute(stmt).fetchall()
column_names = results[0].keys()
temp_df = pd.DataFrame(results, columns=column_names)
temp_df
#After running the query, we can see how each school students performed in AP test. Also we can generate more specific information by exploring temp_df.

"""<font color = 'green'> Q7.May teacher salary be a factor that influences students’ grade behavior?"""

stmt7 = """
SELECT TS.avg_salary, ST.average_grade
FROM sat_test AS ST, teacher_salary AS TS
WHERE ST.school_code = TS.school_code
GROUP BY TS.avg_salary, ST.average_grade
ORDER BY Ts.avg_salary;
"""
results7 = connection.execute(stmt7).fetchall()
column_names7 = results7[0].keys()
sg = pd.DataFrame(results7, columns=column_names7)
sg = sg.dropna()
sg

sg.plot()
plt.title("Relationship between teacher salary and student SAT score")
plt.xlabel('SAT score')
plt.ylabel('Salary')
plt.ylim((0,1000))
plt.show()

sg.plot()
plt.title("Relationship between teacher salary and student SAT score")
plt.xlabel('SAT score')
plt.ylabel('Salary')
plt.show()

"""<font color = 'green'> Q8.Which schools have a higher proportion of students going to higher education?"""

stmt8 = """
SELECT s.school_name, grad.percentage_of_students, grad.university_or_college_type AS uni_types
FROM school AS s, graduates_attending_higher_education AS grad
WHERE grad.school_code = s.school_code AND grad.percentage_of_students IS NOT NULL
	AND university_or_college_type = 'UMass' OR university_or_college_type ='Public Four-Year' OR 
		 university_or_college_type='MA State University' OR university_or_college_type='Private Four-Year'
GROUP BY uni_types, grad.percentage_of_students,s.school_name
ORDER BY grad.percentage_of_students DESC;
"""
results8 = connection.execute(stmt8).fetchall()
column_names8 = results8[0].keys()
se = pd.DataFrame(results8, columns=column_names8)
se = se.dropna()
se

"""Q9: Each school resource ratio situation where resource ratio is defined as total enrollment/number of FTEs"""

#resource_ratio
stmt = """

with total_student(school_code,total_enrollment)as
(select school_code, sum(number_of_students)as total_enrollment
from school_enrollment
group by school_code
order by school_code)

select school.school_code, school.school_name, CAST(total_enrollment AS numeric(6,2))/CAST(fte_count AS numeric(6,2)) as resource_ratio,
CASE WHEN CAST(total_enrollment AS numeric(6,2))/CAST(fte_count AS numeric(6,2)) IS NULL THEN NULL
         ELSE dense_RANK () OVER (ORDER BY CAST(total_enrollment AS numeric(6,2))/CAST(fte_count AS numeric(6,2)) DESC NULLS LAST) 
		 end as rank
from school, total_student,teacher_salary
where school.school_code=total_student.school_code and school.school_code=teacher_salary.school_code 
group by school.school_code,school.school_name,total_enrollment,fte_count

"""


results = connection.execute(stmt).fetchall()
column_names = results[0].keys()
temp_df = pd.DataFrame(results, columns=column_names)

"""Q10: TOP 5 school with the highest ppi score"""

stmt2 = """

select school_code,ppi_type,ppi,dense_rank
from (select school.school_code,ppi_type,ppi, dense_rank() over(order by ppi DESC NULLS LAST)
	  from school
	  join school_ppi on school.school_code=school_ppi.school_code
	  WHERE ppi_type='All students')r
where dense_rank<=5

"""


results_ppi = connection.execute(stmt2).fetchall()
column_names = results_ppi[0].keys()
temp_df_ppi = pd.DataFrame(results_ppi, columns=column_names)